%% -*- mode: Poly-Noweb; noweb-code-mode: sql-mode; fill-column: 80; -*-
% Copyright © 2023 Arandia, Bown, and Carson
% See the LICENSE file for more copyright and licensing information.

%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass[11pt]{article}

\usepackage[russian, english]{babel}

\babelfont{rm}{Noto Sans}
\babelfont{sf}{Noto Sans}

\usepackage{xeCJK}
\setCJKmainfont{Noto Sans CJK SC}

\usepackage{mathpazo} % Palatino font

\usepackage{hyperref}

\usepackage{noweb}
\pagestyle{noweb}
\noweboptions{}

\begin{document}

%----------------------------------------------------------------------------------------
%	TITLE PAGE
%----------------------------------------------------------------------------------------

\begin{titlepage} % Suppresses displaying the page number on the title page and the subsequent page counts as page 1
  \newcommand{\HRule}{\rule{\linewidth}{0.5mm}} % Defines a new command for horizontal lines, change thickness here

  \center % Centre everything on the page

  %------------------------------------------------
  %	Headings
  %------------------------------------------------

  \textsc{\LARGE Mount Royal University}\\[1.5cm] % Main heading such as the name of your university/college

  \textsc{\Large COMP 2521 002}\\[0.5cm] % Major heading such as course name

  \textsc{\large Data Modeling and Query Languages}\\[0.5cm] % Minor heading such as course title

  %------------------------------------------------
  %	Title
  %------------------------------------------------

  \HRule\\[0.4cm]

  {\huge\bfseries Assignment Three}\\[0.4cm] % Title of your document

  \HRule\\[1.5cm]

  %------------------------------------------------
  %	Author(s)
  %------------------------------------------------

  {\large\textit{Author}}\\
  Zyrel \textsc{Arandia} % Your name

  {\large\textit{Author}}\\
  Andrew \textsc{Bown} % Your name

  {\large\textit{Author}}\\
  Bryce \textsc{Carson} % Your name

  %------------------------------------------------
  %	Date
  %------------------------------------------------

  \vfill\vfill\vfill % Position the date 3/4 down the remaining page

  {\large\today} % Date, change the \today to a set date if you want to be precise

  \vfill % Push the date up 1/4 of the remaining page

\end{titlepage}

%----------------------------------------------------------------------------------------
\section{Introduction}
The DDL for the assignment SQL is summarized in this top-level chunk. The tables
are created in the order the referenced chunks are named. The parental chunk has
the same name as the table in the database, but child chunks should have
descriptive names (if any child chunks exist).

The SQL server used is MariaDB. The [[<<MariaDB version>>]] used is contained in
the chunk just referenced.

Occasionally, throughout this document, chunk names may be repeated in SQL
comments to ensure that the tangled SQL is readable without the literate
document.

<<MariaDB version>>=
-- 10.3.39-MariaDB; as of 2023-12-02T23:11PM on macomydb.mtroyal.ca
SELECT VERSION();
@

Overall, the SQL script to create the databse is outlined.

<<A3.sql>>=
<<DDL: tables>>
<<VIEWS used to check data>>
<<Test statements>>
@

The file is not too complex.

\section{DDL}
<<DDL: tables>>=
<<USER>>
<<BOOK>>
<<AUTHOR>>
<<BOOKAUTHOR>>
<<READBOOK>>
@

\section{Entities and Relations}
The business rules of the database are not complex, and can be stated in few
words. The names of the sections that follow state the rules. Further
explanation is given in the body text of a section if necessary.

\subsection{USER is an entity}
\href{https://mariadb.com/kb/en/varchar/}{MariaDB VARCHAR} data types support
different character sets; the UTF-8 character set, which is used for
international email addresses, has a maximum length of 21,844 characters in a
VARCHAR attribute. Given that, email addresses, nick names, and profiles should
each be constrained to this limit.

A profile, or biography, is usually longer than a person's name. Email addresses
are often names, and with international email addresses, these may be rather
long. The length is indeterminate, so rather than truncating names or
biographies, the maximum character length is permited for each string.

Any email address that does not contain an [[@]] character between a ``local
part'' and a ``domain part'' is invalid.

From the perspective of a software engineer, almost any string is a valid
international email address. ASCII-only email addresses are also quite complex!
A great video of a presentation on the topic is available
\href{https://www.youtube.com/watch?v=mrGfahzt-4Q}{here on YouTube} (the
presentation was given by Dylan Beattie at NDC~\{~Oslo~\}). More technical
information is contained in
\href{https://ia902802.us.archive.org/10/items/uasg012endigital/UASG012-en-digital.pdf}{this
  archived} document from the Universal Acceptance Steering Group of ICANN.

\begin{quote}
  In some cases it may be useful to assign both an EAI and a legacy address for a
  mailbox. (See Downgrading, below.) In some cases there may be a straightforward
  transliteration, such as борис@domain to boris@domain or 李伟@domain to
  liwei@domain. In other cases, there may be no natural way to transliterate, and
  the two names may have no obvious connection.
\end{quote}

Client-side and server-side validation of email addresses should be used;
prevent malicious actors. Assuming that client-side validation of email
addresses has been implemented properly, and that server-side validation has
also occurred, what remains is to insert the email address into the database and
check that it has an @ sign in the string, at \textit{minimum} (or
\textit{maximum}, depending on personal engineering perspective).

A globally usable length for variable character columns is useful; it can be
updated in one place, if need be, and all usages will reference the same global
constant.

<<USER>>=
/* USER TABLE AND RELATED STATEMENTS */
CREATE OR REPLACE TABLE USER (
    Email VARCHAR(256) CHARACTER SET utf8 PRIMARY KEY CHECK (Email LIKE "%@%"),
    DateAdded DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(), -- not user modifiable.
    NickName VARCHAR(256) CHARACTER SET utf8 UNIQUE,
    Profile VARCHAR(256) CHARACTER SET utf8
);
-- setDateAddedToNow
CREATE OR REPLACE TRIGGER afterInsertRow_setDateAddedToNow
AFTER INSERT
ON `USER`
FOR EACH ROW -- See MariaDB specifics on row and statement orientation.
UPDATE `USER`
SET NEW.DateAdded = CURRENT_TIMESTAMP();
-- preventDateAddedModification
CREATE OR REPLACE TRIGGER afterUpdateRow_preventDateAddedModification
BEFORE UPDATE
ON `USER`
FOR EACH ROW
UPDATE `USER` SET NEW.DateAdded = OLD.DateAdded;
-- signalErrorUseProcedure
/* Warn database clients that deleting users is impossible manually; they must
use the provided function. */
CREATE OR REPLACE TRIGGER beforeDeleteRow_signalErrorUseProcedure
BEFORE DELETE
ON `USER`
FOR EACH ROW
-- Make use of the behaviour of trigger errors to prevent the row deletion.
-- https://mariadb.com/kb/en/trigger-overview/#trigger-errors
-- https://mariadb.com/kb/en/signal/
SIGNAL SQLSTATE '45000' SET
MESSAGE_TEXT = 'Users must not be deleted manually; use the DELETE_USER() procedure';
@ 
\subsubsection{Change email procedure}
The control model for this database states that email, being the primary key,
cannot be changed. To change the email address of a user, the user must be
deleted (all with all their associated READBOOK records) before creating a new
user with the desired email address. It would be nice to encapsulate this
behaviour into a function to make it more reliable. When a user of the database
attempts to delete a user, some DCL should be used to prevent the deletion, warn
the database user, and inform them to use the provided function which will do
the work for them.

<<USER>>=
SET @PROHIBIT_DEL = 1;

/* Warn database clients that deleting users is impossible manually; they must
use the provided function. */
CREATE OR REPLACE TRIGGER beforeDeleteRow_signalErrorUseProcedure
BEFORE DELETE
ON `USER`
FOR EACH ROW
-- Make use of the behaviour of trigger errors to prevent the row deletion.
-- https://mariadb.com/kb/en/trigger-overview/#trigger-errors
-- https://mariadb.com/kb/en/signal/
IF @PROHIBIT_DEL THEN
SIGNAL SQLSTATE '45000' SET
MESSAGE_TEXT = <<Warn client deleting users prohibited>>;
END IF;

@ 

<<Warn client deleting users prohibited>>=
'Users must not be deleted manually; use the DELETE_USER() procedure'
@ 

<<USER>>=
CREATE
OR REPLACE
PROCEDURE DELETE_USER (IN param_email VARCHAR(256) CHARACTER SET utf8)
MODIFIES SQL DATA
COMMENT 'Delete a user from the database.'
BEGIN
DELETE FROM READBOOK WHERE READBOOK.Email = param_email;
  -- Override trigger signal sentinel
  SET @PROHIBIT_DEL = 0;
  DELETE FROM USER WHERE USER.Email = param_email;
  SET @PROHIBIT_DEL = 1;
END;

@ 

Another convenience would be to automatically add the READBOOK relations back to
the new user, so that their user data isn't truly lost; this quotation shows
what must be done to enable us to delete a user, as no foreign key references
can exist before deleting a record. We do not want to reduce referential
integrity. If there is a way to store the information temporarily and insert it
into the READBOOK table after deleting the old user and creating a new one, that
would be nice; this can perhaps be accomplished with a VIEW or a query result.

\begin{quote}
  When a user is deleted all the READBOOK records associated with the user must
  also be deleted.
\end{quote}

<<>>=
/* TODO: implement the behaviour/functionality described in
the paragraphing of this subsubseciton. */
@ 

\subsection{BOOK is an entity}
To prevent books from being deleted, some DCL will be necessary.
\begin{quote}
  [NOTE]: Books can never be deleted.
\end{quote}

<<BOOK>>=
/* BOOK TABLE AND RELATED STATEMENTS */
CREATE OR REPLACE TABLE BOOK (
  BookID INT PRIMARY KEY AUTO_INCREMENT,
  Title VARCHAR(256) CHARACTER SET utf8 NOT NULL,
  -- Year is additionally constrained by a trigger to be
  -- <= YEAR(CURDATE()).
  Year INT CHECK (Year >= -3500),
  NumRaters INT DEFAULT 0,
  Rating DECIMAL(2,1) DEFAULT 0.0
);
-- signalErrorUseProcedure
CREATE OR REPLACE TRIGGER beforeDeleteRow_signalErrorImpossible
BEFORE DELETE
ON BOOK
FOR EACH ROW
-- Make use of the behaviour of trigger errors to prevent the row deletion.
-- https://mariadb.com/kb/en/trigger-overview/#trigger-errors
-- https://mariadb.com/kb/en/signal/
SIGNAL SQLSTATE '45000' SET
MESSAGE_TEXT = 'Deleting books is prohibited.';
-- constrainYearToPresent
CREATE OR REPLACE TRIGGER beforeInsertRow_constrainYearToPresent
BEFORE INSERT 
ON BOOK 
FOR EACH ROW
SET NEW.Year = IF(NEW.Year > YEAR(CURDATE()), YEAR(CURDATE()), NEW.Year);
@

Users obviously cannot read books that have not been written yet, so
[[<<the current year>>]] is used to limit what can be inserted into
the database.

<<BOOK>>=
CREATE OR REPLACE TRIGGER beforeInsertRow_constrainYearToPresent
BEFORE INSERT ROW
BEGIN
IF new.Year > <<the current year>>
SET new.Year = <<the current year>>
END;
@ 

The current year is obtainable with built-in date and time functions;
[[CURDATE()]] returns the date in a YYYY-MM-DD format, and [[YEAR()]] extracts
the date portion.

<<the current year>>=
YEAR(CURDATE())
@

\href{https://www.oldest.org/artliterature/writing/}{The Kish Tablet} is
believed to date from 3500 BCE. It is likely the oldest confirmed writing known,
so any books a user claims to have read should be more recent than this.

<<date of the Kish Tablet>>=
-3500
@

Further, we must [[<<prevent the deletion of books>>]], so we require a new trigger for that.

The following trigger was inspired by code read from \href{https://www.mssqltips.com/sqlservertip/2711/different-ways-to-make-a-table-read-only-in-a-sql-server-database/}{MSSQLTips}.

<<prevent the deletion of books>>=
/* Warn database clients that deleting users is impossible manually; they must
use the provided function. */
CREATE OR REPLACE TRIGGER beforeDeleteRow_signalErrorImpossible
BEFORE DELETE
ON `BOOK`
FOR EACH ROW
-- Make use of the behaviour of trigger errors to prevent the row deletion.
-- https://mariadb.com/kb/en/trigger-overview/#trigger-errors
-- https://mariadb.com/kb/en/signal/
SIGNAL SQLSTATE '45000' SET
MESSAGE_TEXT = <<Warn client deleting books prohibited>>;
@ 

<<Warn client deleting books prohibited>>=
'Deleting books is prohibited.'
@ 

\subsection{AUTHOR is an entity}
<<AUTHOR>>=
/* AUTHOR TABLE AND RELATED STATEMENTS */
CREATE OR REPLACE TABLE AUTHOR (
    AuthorID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(256) CHARACTER SET utf8 NOT NULL,
    MiddleName VARCHAR(256) CHARACTER SET utf8,
    Lastname VARCHAR(256) CHARACTER SET utf8
);
@

\subsection{BOOK has AUTHOR}
<<BOOKAUTHOR>>=
/* BOOKAUTHOR TABLE AND RELATED STATEMENTS */
CREATE OR REPLACE TABLE BOOKAUTHOR (
    AuthorID INT,
    BookID INT,
    FOREIGN KEY (AuthorID) REFERENCES AUTHOR(AuthorID),
    FOREIGN KEY (BookID) REFERENCES BOOK(BookID),
    PRIMARY KEY (AuthorID, BookID)
);
-- Composite primary key composed of foreign keys:
ALTER TABLE BOOKAUTHOR ADD CONSTRAINT
    PRIMARY KEY (AuthorID, BookID);
-- Foreign key AuthorID
ALTER TABLE BOOKAUTHOR ADD CONSTRAINT
FOREIGN KEY (AuthorID) REFERENCES AUTHOR (AuthorID)
ON
DELETE
	CASCADE;
-- Foreign key BookID; books cannot be deleted, so do not permit cascading.
ALTER TABLE BOOKAUTHOR ADD CONSTRAINT
FOREIGN KEY (BookID) REFERENCES BOOK (BookID);

@

\subsection{USER reads BOOK}
Users can read many books, so necessarily the Email address in a READBOOK should
not be unique. This will lead to an excessive amount of storage usage, but this
is the specification given in the database design (by our instructor).

\begin{quote}
  When a user is deleted, all the READBOOK records associated with the user must
  also be deleted.

  The Rating and DateRead can bemodified.
\end{quote}

Ergo, a trigger should be implemented to delete the records [[WHERE
  READBOOK.Email = USER.Email]] whenever the trigger condition is satisfied.

<<READBOOK>>=
/* READBOOK TABLE AND RELATED STATEMENTS */
CREATE OR REPLACE TABLE READBOOK (
BookID INT,
Email VARCHAR(256) CHARACTER SET utf8,
DateRead DATE NOT NULL,
Rating INT NOT NULL CHECK (Rating BETWEEN 1 AND 10),
FOREIGN KEY (BookID) REFERENCES BOOK(BookID),
FOREIGN KEY (Email) REFERENCES `USER`(Email) ON DELETE CASCADE);
-- Add composite primary key
ALTER TABLE READBOOK ADD CONSTRAINT PRIMARY KEY (BookID, Email);
-- recalculateBookRatingOnUpdate
CREATE OR REPLACE TRIGGER afterUpdateRow_recalculateBookRating
    AFTER UPDATE ON READBOOK FOR EACH ROW CalculateRating();
-- recalculateBookRatingOnInsert
CREATE OR REPLACE TRIGGER afterInsertRow_recalculateBookRating
AFTER INSERT ON READBOOK FOR EACH ROW CalculateRating();
-- recalculateBookRatingOnDelete
CREATE OR REPLACE TRIGGER afterDeleteRow_recalculateBookRating
    AFTER DELETE ON READBOOK FOR EACH ROW CalculateRating();
-- Include the following procedure after this code.
CREATE OR REPLACE PROCEDURE CalculateRating()
    BEGIN
    UPDATE BOOK
    SET Rating = (SELECT AVG(Rating)
                  FROM READBOOK
                  WHERE BOOK.BookID = READBOOK.BookID),
    SET NumRaters = (SELECT COUNT(BOOK.BookID)
                     FROM READBOOK
                     WHERE BOOK.BookID = READBOOK.BookID)
    WHERE BOOK.BookID = READBOOK.BookID;
    END;

@

Ratings must be constrained between one and ten, but this can be accomplished
with a [[CHECK]] rather than a constraint.

<<ensure rating valid>>=
CHECK (Rating >= 1 AND Rating <= 10)
@ 

\href{https://sqldocs.org/sqlite/sqlite-foreign-keys/}{Ray Ferrell} explains in
the linked blog how to make changes to a foreign key's referent domain propagate
(cascade) to the referring (child) table. This eliminates the need to
programmatically delete rows in the table when the referent is updated, and
instead the SQL server and supporting engines do the work for us.

<<email>>=
Email <<256 UTF-8 VARCHAR>> NOT NULL
    FOREIGN KEY REFERENCES USER(Email)
    ON DELETE CASCADE
@ 

<<READBOOK>>=
ALTER TABLE READBOOK ADD CONSTRAINT
PRIMARY KEY (BookID, Email);

@ 

The only remaining task is to trigger a call to the user-defined
[[CalculateRating]] aggregate function to update [[BOOK.Rating]] when this table
is updated.

<<READBOOK>>=
<<Update ratings in BOOK on changes to READBOOK>>=
CREATE TRIGGER afterUpdateRow_recalculateBookRating
    AFTER UPDATE <<recalculate rating after operation>>

CREATE TRIGGER afterInsertRow_recalculateBookRating
AFTER INSERT <<recalculate rating after operation>>

CREATE TRIGGER afterDeleteRow_recalculateBookRating
    AFTER DELETE <<recalculate rating after operation>>

-- Include the following procedure after this code.
<<Calculate Rating>>

<<recalculate rating after operation>>=
ON READBOOK FOR EACH ROW CALL CalculateRating();
@

How [[CalculateRating()]] performs its work is now defined.

<<Calculate Rating>>=
CREATE OR REPLACE PROCEDURE CalculateRating
    AS BEGIN
    UPDATE BOOK
    SET Rating = (SELECT AVG(Rating)
                  FROM READBOOK
                  WHERE BOOK.BookID = READBOOK.BookID),
    SET NumRaters = (SELECT COUNT(*)
                     FROM READBOOK
                     WHERE BOOK.BookID = READBOOK.BookID)
    WHERE BOOK.BookID = READBOOK.BookID;
    END;
@ 

VIEWS are SQL Querys that allow a user to easily see the tables and data from
the database. The following views are used to check the data in the database.

<<VIEWS used to check data>>=
/* This view can be used to identify invalid users (users
without an @ in their email) */
CREATE VIEW InvalidUsers AS
SELECT Email, NickName
FROM
    USER
WHERE
    Email NOT LIKE '%@%';


/* This view provides details about books, including
multiple authors if applicable */
CREATE VIEW BookDetails AS
SELECT B.BookID, B.Title, B.Year, B.NumRaters, B.Rating,
       GROUP_CONCAT(A.FirstName, ' ',
                    A.MiddleName, ' ',
                    A.Lastname) AS Authors
FROM
    BOOK B
LEFT JOIN
    BOOKAUTHOR BA ON B.BookID = BA.BookID
LEFT JOIN
    AUTHOR A ON BA.AuthorID = A.AuthorID
GROUP BY
    B.BookID, B.Title, B.Year, B.NumRaters, B.Rating;


-- View to display books with their average ratings
CREATE VIEW BooksAvgRatings AS
SELECT B.BookID, B.Title, AVG(RB.Rating) AS AverageRating
FROM
    BOOK B
LEFT JOIN
    READBOOK RB ON B.BookID = RB.BookID
GROUP BY
    B.BookID, B.Title;


/* This view provides statistics about users who have read
and rated books */
CREATE VIEW UserBookDetails AS
SELECT U.Email, U.NickName,
       COUNT(RB.BookID) AS TotalBooksRead,
       AVG(RB.Rating) AS AverageRating
FROM
    USER U
LEFT JOIN
    READBOOK RB ON U.Email = RB.Email
GROUP BY
    U.Email, U.NickName;
@

\section{Testing}
<<Test USER>>=
INSERT INTO `BOOK`('ăѣ𝔠ծềſģȟᎥ𝒋ǩľḿꞑȯ𝘱𝑞𝗋𝘴ȶ𝞄𝜈ψ𝒙𝘆𝚣1234567890!@#$%^&*', -1500, NULL, NULL);

/* USER Test Data */
INSERT INTO USER(Email,DateAdded, NickName) VALUES ("E@GMAIL.COM","2023-12-06" ,"t");
INSERT INTO USER (Email, NickName, Profile) VALUES ("bcars268@mtroyal.ca", NULL, NULL);
INSERT INTO USER (EMAIL,DateAdded,NICKNAME, PROFILE) VALUES ("TO@gmail.com","2023-12-06" ,"gre", NULL);
SELECT * FROM USER;

/* BOOK Test Data */
INSERT INTO BOOK(Title, Year) VALUES  ("What a Wonderful Day", "2003");
INSERT INTO BOOK(Title, Year) VALUES  ("Diary of a WimpyKid", "2010");
INSERT INTO BOOK(Title, Year) VALUES  ("A Novel", "1002");
INSERT INTO BOOK (Title, Year) VALUES  ("Harry's Quest", "2007");
INSERT INTO BOOK (Title, Year) VALUES  ("Don't Give Up", "2014");
INSERT INTO BOOK (Title, Year) VALUES  ("The Great Adventure", "1998");
INSERT INTO BOOK (Title, Year) VALUES  ("Mysteries Unveiled", "2022");
INSERT INTO BOOK (Title, Year) VALUES  ("Journey to the Unknown", "1985");
SELECT * FROM BOOK;

/* AUTHOR Test Data */
INSERT INTO AUTHOR (FirstName, LastName) VALUES  ("Thomas", "Heffley");
INSERT INTO AUTHOR(FirstName, LastName) VALUES  ("Thomas", NULL);
INSERT INTO AUTHOR(FirstName, LastName, MiddleName) VALUES  ("Flint", NULL, "Red");
INSERT INTO AUTHOR (FirstName, LastName) VALUES  ("John", "Doe");
INSERT INTO AUTHOR (FirstName, LastName, MiddleName) VALUES  ("Jane", "Smith", "A");
INSERT INTO AUTHOR (FirstName, LastName) VALUES  ("Robert", "O'Connor");
INSERT INTO AUTHOR (FirstName, LastName) VALUES  ("Eliza", "Müller");
INSERT INTO AUTHOR (FirstName, LastName, MiddleName) VALUES  ("Sara", "Williams", NULL);
SELECT * FROM AUTHOR;

/* BOOKAUTHOR Test Data */
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("1", "3");
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("2", "5");
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("3", "1");
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("4", "8");
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("5", "2");
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("6", "4");
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("7", "7");
INSERT INTO BOOKAUTHOR (AuthorID, BookID) VALUES  ("8", "6");
-- Big wild select statement
SELECT
	BA.AuthorID,
	A.FirstName,
	A.LastName,
	A.MiddleName,
	BA.BookID,
	B.Title
FROM
	BOOKAUTHOR BA,
	AUTHOR A,
	BOOK B
WHERE
	BA.AuthorID = A.AuthorID
	AND BA.BookID = B.BookID;

/* READBOOK Test Data */
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (1, 'E@GMAIL.COM', 8, '2023-12-01');
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (2, 'E@GMAIL.COM', 6, '2023-12-05');
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (3, 'bcars268@mtroyal.ca', 9, '2023-11-20');
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (4, 'bcars268@mtroyal.ca', 7, '2023-11-25');
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (5, 'TO@gmail.com', 5, '2023-12-10');
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (6, 'TO@gmail.com', 8, '2023-12-15');
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (7, 'john.doe@example.com', 10, '2023-12-20');
INSERT INTO READBOOK (BookID, Email, Rating, DateRead) VALUES (8, 'john.doe@example.com', 4, '2023-12-25');
Select * from READBOOK;

/* This view can be used to identify invalid users (users
without an @ in their email) */
CREATE VIEW InvalidUsers AS
SELECT Email, NickName
FROM
    USER
WHERE
    Email NOT LIKE '%@%';


/* This view provides details about books, including
multiple authors if applicable */
CREATE VIEW BookDetails AS
SELECT B.BookID, B.Title, B.Year, B.NumRaters, B.Rating,
       GROUP_CONCAT(A.FirstName, ' ',
                    A.MiddleName, ' ',
                    A.Lastname) AS Authors
FROM
    BOOK B
LEFT JOIN
    BOOKAUTHOR BA ON B.BookID = BA.BookID
LEFT JOIN
    AUTHOR A ON BA.AuthorID = A.AuthorID
GROUP BY
    B.BookID, B.Title, B.Year, B.NumRaters, B.Rating;


-- View to display books with their average ratings
CREATE VIEW BooksAvgRatings AS
SELECT B.BookID, B.Title, AVG(RB.Rating) AS AverageRating
FROM
    BOOK B
LEFT JOIN
    READBOOK RB ON B.BookID = RB.BookID
GROUP BY
    B.BookID, B.Title;


/* This view provides statistics about users who have read
and rated books */
CREATE VIEW UserBookDetails AS
SELECT U.Email, U.NickName,
       COUNT(RB.BookID) AS TotalBooksRead,
       AVG(RB.Rating) AS AverageRating
FROM
    USER U
LEFT JOIN
    READBOOK RB ON U.Email = RB.Email
GROUP BY
    U.Email, U.NickName;
@ 

\end{document}
