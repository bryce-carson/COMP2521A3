%% -*- mode: Poly-Noweb; noweb-code-mode: sql-mode; fill-column: 80; -*-
% Copyright © 2023 Arandia, Bown, and Carson
% See the LICENSE file for more copyright and licensing information.

%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass[11pt]{article}

\usepackage[utf8]{inputenc} % Required for inputting international characters
\usepackage[T1]{fontenc} % Output font encoding for international characters

\usepackage{mathpazo} % Palatino font

\usepackage{hyperref}

\usepackage{noweb}
\pagestyle{noweb}
\noweboptions{}

\begin{document}

%----------------------------------------------------------------------------------------
%	TITLE PAGE
%----------------------------------------------------------------------------------------

\begin{titlepage} % Suppresses displaying the page number on the title page and the subsequent page counts as page 1
  \newcommand{\HRule}{\rule{\linewidth}{0.5mm}} % Defines a new command for horizontal lines, change thickness here

  \center % Centre everything on the page

  %------------------------------------------------
  %	Headings
  %------------------------------------------------

  \textsc{\LARGE Mount Royal University}\\[1.5cm] % Main heading such as the name of your university/college

  \textsc{\Large COMP 2521 002}\\[0.5cm] % Major heading such as course name

  \textsc{\large Data Modeling and Query Languages}\\[0.5cm] % Minor heading such as course title

  %------------------------------------------------
  %	Title
  %------------------------------------------------

  \HRule\\[0.4cm]

  {\huge\bfseries Assignment Three}\\[0.4cm] % Title of your document

  \HRule\\[1.5cm]

  %------------------------------------------------
  %	Author(s)
  %------------------------------------------------

  {\large\textit{Author}}\\
  Zyrel \textsc{Arandia} % Your name

  {\large\textit{Author}}\\
  Andrew \textsc{Bown} % Your name

  {\large\textit{Author}}\\
  Bryce \textsc{Carson} % Your name

  %------------------------------------------------
  %	Date
  %------------------------------------------------

  \vfill\vfill\vfill % Position the date 3/4 down the remaining page

  {\large\today} % Date, change the \today to a set date if you want to be precise

  \vfill % Push the date up 1/4 of the remaining page

\end{titlepage}

%----------------------------------------------------------------------------------------
\section{Introduction}
The DDL for the assignment SQL is summarized in this top-level chunk. The tables
are created in the order the referenced chunks are named. The parental chunk has
the same name as the table in the database, but child chunks should have
descriptive names (if any child chunks exist).

The SQL server used is MariaDB. The [[<<MariaDB version>>]] used is contained in
the chunk just referenced.

Occasionally, throughout this document, chunk names may be repeated in SQL
comments to ensure that the tangled SQL is readable without the literate
document.

<<MariaDB version>>=
-- 10.3.39-MariaDB; as of 2023-12-02T23:11PM on macomydb.mtroyal.ca
SELECT VERSION();
@

Overall, the SQL script to create the databse is outlined.

<<A3.sql>>=
<<DDL: tables>>
@ 

The file is not too complex.

\section{DDL}
<<DDL: tables>>=
<<USER>>
<<BOOK>>
<<AUTHOR>>
<<BOOKAUTHOR>>
<<READBOOK>>
<<WARNINGS table>>
@

\section{Entities and Relations}
The business rules of the database are not complex, and can be stated in few
words. The names of the sections that follow state the rules. Further
explanation is given in the body text of a section if necessary.

\subsection{USER is an entity}
\href{https://mariadb.com/kb/en/varchar/}{MariaDB VARCHAR} data types support
different character sets; the UTF-8 character set, which is used for
international email addresses, has a maximum length of 21,844 characters in a
VARCHAR attribute. Given that, email addresses, nick names, and profiles should
each be constrained to this limit.

A profile, or biography, is usually longer than a person's name. Email addresses
are often names, and with international email addresses, these may be rather
long. The length is indeterminate, so rather than truncating names or
biographies, the maximum character length is permited for each string.

<<USER>>=
CREATE TABLE USER (
Email VARCHAR(21,844) CHARACTER SET utf8 PRIMARY KEY,
DateAdded DATETIME NOT NULL,
NickName VARCHAR(21,844) CHARACTER SET utf8 UNIQUE,
Profile VARCHAR(21,844) CHARACTER SET utf8);
-- Ensure email addresses are valid
<<Ensure email addresses are valid>>
@

From the perspective of a software engineer, almost any string is a valid
international email address. ASCII-only email addresses are also quite complex!
A great video of a presentation on the topic is available
\href{https://www.youtube.com/watch?v=mrGfahzt-4Q}{here on YouTube} (the presentation was
given by Dylan Beattie at NDC~\{~Oslo~\}). More technical information is
contained in \href{https://ia902802.us.archive.org/10/items/uasg012endigital/UASG012-en-digital.pdf}{this
  archived}
document from the Universal Acceptance Steering Group of ICANN.

\begin{quote}
  In some cases it may be useful to assign both an EAI and a legacy address for a
  mailbox. (See Downgrading, below.) In some cases there may be a straightforward
  transliteration, such as борис@domain to boris@domain or 李伟@domain to
  liwei@domain. In other cases, there may be no natural way to transliterate, and
  the two names may have no obvious connection.
\end{quote}

Client-side and server-side validation of email addresses should be used;
prevent malicious actors. Assuming that client-side validation of email
addresses has been implemented properly, and that server-side validation has
also occurred, what remains is to insert the email address into the database and
check that it has an @ sign in the string, at \textit{minimum} (or
\textit{maximum}, depending on personal engineering perspective).

<<Ensure email addresses are valid>>=
<<Define a server function to be triggered whenever a new user is created>>
<<Whenever a user is created, call the defined function to validate email addresses>>
@

Performing the check is simple; query all user email addresses, and any that are
invalid should be logged to a [[<<WARNINGS table>>]] for database administrator
review.

<<Define a server function to be triggered whenever a new user is created>>=
@

Any email address that does not contain an [[@]] character between a ``local
part'' and a ``domain part'' is invalid.

<<Whenever a user is created, call the defined function to validate email addresses>>=
SELECT Email from USER.Email WHERE Email NOT LIKE "%@%";
@

<<WARNINGS table>>=

@ 

\subsection{BOOK is an entity}
<<BOOK>>=
  CREATE TABLE BOOK (
    BookID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(255) NOT NULL,
    Year INT CHECK (Year >= 1000 AND Year <= 9999),
    NumRaters INT DEFAULT 0,
    Rating DECIMARL(2,1) DEFAULT 0.0 CHECK (Rating >= 0.0 AND Rating <= 5.0)
  );
@

\subsection{AUTHOR is an entity}
<<AUTHOR>>=
  CREATE TABLE AUTHOR (
    AuthorID INT PRIMARY KEY AUTO_INCREMENT,
    Lastname VARCHAR(50),
    FirstName VARChar(50) NOT NULL,
    MiddleName VARCHAR(50)
  );
@

\subsection{BOOK has AUTHOR}
Books have one or more authors. This

<<BOOKAUTHOR>>=
  CREATE TABLE BOOKAUTHOR (
    AuthorID INT FOREIGN KEY REFERENCES AUTHOR(AuthorID),
    BookID INT FOREIGN KEY REFERENCES BOOK(BookID)
  );
@

\subsection{USER reads BOOK}
Users can read many books, so necessarily the Email address in a READBOOK should
not be unique. This will lead to an excessive amount of storage usage, but this
is the specification given in the database design (by our instructor).

\begin{quote}
  When a user is deleted, all the READBOOK records associated with the user must
  also be deleted.
\end{quote}

Ergo, a trigger should be implemented to delete the records [[WHERE
READBOOK.Email = USER.Email]] whenever the trigger condition is satisfied.

<<READBOOK>>=
CREATE TABLE READBOOK (
  BookID INT FOREIGN KEY REFERENCES BOOK(BookID) NOT NULL,
  Email VARCHAR(...) FOREIGN KEY REFERENCES USER(Email) NOT NULL ON DELETE CASCADE,
  DateRead DATE NOT NULL,
  Rating INT(2) CHECK Rating >= 1 AND Rating <= 10 NOT NULL,
  PRIMARY KEY (BookID, Email)) ENGINE=INNODB;

<<Update ratings in a BOOK on UPDATE>>
@ 

\href{https://sqldocs.org/sqlite/sqlite-foreign-keys/}{Ray Ferrell} explains in
the linked blog how to make changes to a foreign key's referent domain propagate
(cascade) to the referring (child) table. This eliminates the need to
programmatically delete rows in the table when the referent is updated, and
instead the SQL server and supporting engines do the work for us. The only
remaining task is to then trigger a call to the user-defined [[CalculateRating]]
aggregate function to update `BOOK.Rating` when this table is updated.

<<Update ratings in BOOK on UPDATE>>=
CREATE TRIGGER afterUpdateRow_recalculateBookRating AFTER UPDATE ON READBOOK FOR EACH ROW CalculateRating();
CREATE TRIGGER afterInsertRow_recalculateBookRating AFTER INSERT ON READBOOK FOR EACH ROW CalculateRating();
CREATE TRIGGER afterDeleteRow_recalculateBookRating AFTER DELETE ON READBOOK FOR EACH ROW CalculateRating();
@
\end{document}
